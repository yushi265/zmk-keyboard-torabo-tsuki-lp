#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC    &kp N1     &kp N2        &kp N3            &kp N4          &kp N5                                 &kp N6       &kp N7    &kp N8     &kp N9    &kp N0                &kp BSPC
&kp TAB    &kp Q      &kp W         &kp E             &kp R           &kp T                                  &kp Y        &kp U     &kp I      &kp O     &kp P                 &kp BSPC
&kp CAPS   &kp A      &kp S         &kp D             &kp F           &kp G        &mkp LCLK  &mkp RCLK      &kp H        &kp J     &kp K      &kp L     &lt 3 SEMICOLON       &kp SQT
&kp LSHFT  &kp Z      &kp X         &kp C             &kp V           &kp B        &kp SPACE  &kp RET        &kp N        &kp M     &kp COMMA  &kp DOT   &mt RIGHT_SHIFT FSLH  &kp RSHFT
&kp LCTRL  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &lt 2 SPACE  &kp TAB    &kp BACKSPACE  &lt 1 ENTER  &kp BSPC  &kp RALT   &kp RGUI  &kp LC(SPACE)         &kp RCTRL
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans      &trans      &trans      &trans      &trans                          &trans     &trans                &trans                 &trans             &trans            &trans
&trans  &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                          &kp N6     &kp N7                &kp N8                 &kp N9             &kp N0            &trans
&trans  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp UNDERSCORE  &trans  &trans  &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &trans
&trans  &kp LS(N5)  &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp PLUS        &trans  &trans  &kp EQUAL  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LEFT_BRACE     &kp RIGHT_BRACE   &trans
&trans  &trans      &trans      &trans      &trans      &trans          &trans  &trans  &trans     &trans                &trans                 &trans             &trans            &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans            &trans            &trans      &trans      &trans                      &trans          &trans         &trans            &trans             &trans         &trans
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                  &kp LS(N6)      &kp LS(N7)     &kp LS(N8)        &kp LS(N9)         &kp LS(N0)     &trans
&trans  &kp N1            &kp N2            &kp N3      &kp N4      &kp N5      &trans  &trans  &kp LEFT_BRACE  &kp MINUS      &kp EQUAL         &kp RIGHT_BRACE    &kp COLON      &trans
&trans  &kp N6            &kp N7            &kp N8      &kp N9      &kp N0      &trans  &trans  &kp LS(MINUS)   &kp LS(EQUAL)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &trans
&trans  &trans            &trans            &trans      &trans      &trans      &trans  &trans  &kp TAB         &kp DEL        &trans            &trans             &trans         &trans
            >;
        };

        layer_3 {
            bindings = <
&none  &none    &none    &none         &none         &none                     &none     &none      &none          &none      &none       &none
&none  &kp F1   &kp F2   &kp F3        &kp F4        &kp F5                    &kp HOME  &kp PG_UP  &kp PAGE_DOWN  &kp END    &kp ESCAPE  &none
&none  &kp F6   &kp F7   &kp F8        &kp F9        &kp F10     &none  &none  &mkp MB4  &mkp MB1   &mkp RCLK      &kp LG(W)  &none       &none
&none  &kp F11  &kp F12  &out OUT_USB  &out OUT_BLE  &bt BT_NXT  &none  &none  &mkp MB5  &kp DQT    &kp GRAVE      &kp TILDE  &kp PIPE    &none
&none  &none    &none    &none         &kp DELETE    &kp TAB     &none  &none  &none     &none      &none          &none      &none       &none
            >;
        };
    };
};
